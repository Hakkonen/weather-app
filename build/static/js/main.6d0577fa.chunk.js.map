{"version":3,"sources":["components/Current.js","components/LocationSearch.js","components/Forecast.js","App.js","serviceWorker.js","index.js"],"names":["Current","props","useEffect","className","Math","round","weather","main","temp","role","style","width","temp_max","aria-valuenow","aria-valuemin","temp_min","aria-valuemax","floor","ceil","feels_like","wind","speed","LocationSearch","useState","searchValue","setSearchValue","name","onSubmit","e","preventDefault","search","type","placeholder","aria-label","onChange","event","target","value","Forecast","hourly","renderLineChart","setRenderLineChart","chartData","useAxios","location","loading","error","response","key","data","list","timeKey","dt_txt","substr","slice","push","time","pv","amt","console","log","x","window","innerWidth","height","dataKey","stroke","wrapperStyle","backgroundColor","App","setLocation","formattedInput","replace","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6d0577fa.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\n\nimport 'bootstrap/dist/css/bootstrap.css'\n\nfunction Current(props) {\n\n    useEffect(() => {\n        // console.log(props)\n    }, [props])\n\n    return (\n        <div className='d-lg-flex container module-dimensions justify-content-center align-items-center w-75'>\n            <div className='row'>\n                <div className='col text-gold text-center'>\n\n                    <div className='row'>\n                        <span className='col'>Current Temp</span>\n                    </div>\n\n                    <div className='row'>\n                        <span className='splash-temp col'>\n                            {Math.round(props.weather.main.temp)}\n                            <span className='splash-temp-celsius'>&#8451;</span>\n                        </span>\n                    </div>\n                    {/* Heat bar */}\n                    <div className=\"progress\">\n                        <div \n                            className=\"progress-bar bg-warning\" \n                            role=\"progressbar\" \n                            style={{width: ((props.weather.main.temp*100)/props.weather.main.temp_max)}}\n                            aria-valuenow={props.weather.main.temp} \n                            aria-valuemin={props.weather.main.temp_min} \n                            aria-valuemax={props.weather.main.temp_max} \n                        />\n                    </div>\n\n                    <div className='row p-1'>\n                        <div className='col text-left'>\n                            <span className='text-grey'>Min: </span><span>{Math.floor(props.weather.main.temp_min)}</span>\n                        </div>\n                        <div className='col text-right'>\n                            <span className='text-grey'>Max: </span><span>{Math.ceil(props.weather.main.temp_max)}</span>\n                        </div>\n                    </div>\n\n                    <div className='row p-1'>\n                        <div className='col-6 text-left'>\n                            <span className='text-grey'>Feels like: </span>\n                        </div>\n                        <div className='col-6 text-right'>\n                            <span>{Math.round(props.weather.main.feels_like)}</span>\n                        </div>\n                    </div>\n\n                    <div className='row p-1'>\n                        <div className='col-6 text-left'>\n                            <span className='text-grey'>Wind: </span>\n                        </div>\n                        <div className='col-6 text-right'>\n                            <span>{Math.round(props.weather.wind.speed)}<span className='text-grey'> kp/h</span></span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Current","import React, { useState } from 'react'\n\nfunction LocationSearch(props) {\n    const [ searchValue, setSearchValue ] = useState('')\n\n    return (\n        <div className='container'>\n            <div className='row text-center pt-3'>\n                <p className='col text-gold city-name'>{props.name}</p>\n            </div>\n            <div className='row pb-2'>\n                    <form className=\"d-flex align-items-center justify-content-center col form-inline my-2 my-lg-0\" onSubmit={e => {e.preventDefault(); props.search(searchValue)}}>\n                        <input className=\"form-control mr-sm-2 w-50\" type=\"search\" placeholder=\"Eg. London, UK\" aria-label=\"Search\" onChange={event => setSearchValue(event.target.value)} />\n                        <button className=\"btn btn-outline-warning mt-1 my-sm-0 ml-1\" type=\"submit\">Search</button>\n                    </form>\n            </div>\n        </div>\n    )\n}\n\nexport default LocationSearch","import React, { useState, useEffect } from 'react'\nimport useAxios from 'axios-hooks'\nimport { LineChart, Line, XAxis, Tooltip } from 'recharts'\n\nfunction Forecast(props) {\n    const [ hourly ] = useState([])\n    const [renderLineChart, setRenderLineChart ] = useState()\n    const chartData = []\n    const [{loading, error, response}] = useAxios(\n        `https://api.openweathermap.org/data/2.5/forecast?q=${props.location}&units=metric&appid=d233733ddc2dfd6e8b9278bce7c20c19`\n    )\n\n    useEffect(() => {\n        if (!response) {\n            console.log('loading')\n        } else {\n            for (const key in response.data.list) {\n                let timeKey = response.data.list[key].dt_txt.substr(11,2) + 'h'\n                if (timeKey[0] === '0') {timeKey = timeKey.slice(1)}\n                chartData.push({\n                    // key: key, \n                    time: timeKey, \n                    temp: response.data.list[key].main.temp, \n                    pv: 0, amt: 0\n                },)\n            }\n            console.log(chartData)\n            console.log(chartData[0])\n            for(let x = 0; x < 8; x++) {\n                hourly.push(chartData[x])\n            }\n            console.log(hourly)\n            setRenderLineChart(\n                <LineChart width={(window.innerWidth)*75/100} height={150} data={hourly}>\n                    <Line type=\"monotone\" dataKey=\"temp\" stroke=\"rgb(254,203,54)\" />\n                    {/* <CartesianGrid stroke=\"rgb(254,203,54)\" /> */}\n                    <XAxis dataKey=\"time\" />\n                    {/* <YAxis /> */}\n                    <Tooltip wrapperStyle={{ width: 100, backgroundColor: '#f5f5f5' }} />\n                </LineChart>\n            )\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [response])\n\n    if (loading) return <p className='text-center text-gold'>Loading!</p>\n    if (error) return <p>Error!</p>\n    \n    return (\n        <div className='d-lg-flex container module-dimensions justify-content-center align-items-center w-75 text-gold'>\n            <div className='row pt-5'>\n                <span className='col text-center'>24 Hour Forecast</span>\n            </div>\n\n            <div className='row pt-5 justify-content-center align-items-center'>\n                {renderLineChart}\n            </div>\n        </div>\n    )\n}\n\nexport default Forecast","import React, { useState } from 'react'\nimport useAxios from 'axios-hooks'\n\nimport './App.css'\n\nimport Current from './components/Current'\nimport LocationSearch from './components/LocationSearch'\nimport Forecast from './components/Forecast'\n\n// https://api.openweathermap.org/data/2.5/forecast?q=${location}&units=metric&appid=d233733ddc2dfd6e8b9278bce7c20c19\n\nfunction App() {\n  const [ location, setLocation ] = useState('Melbourne,au')\n  const [{data, loading, error}] = useAxios(\n    `https://api.openweathermap.org/data/2.5/weather?q=${location}&units=metric&appid=d233733ddc2dfd6e8b9278bce7c20c19`\n  )\n\n  if (loading) return <p className='text-center text-gold'>Loading!</p>\n  if (error) console.log(error)\n  \n\n  function handleSubmit(event) {\n    const formattedInput = event.replace(' ', '%20')\n    setLocation(formattedInput)\n    // console.log(formattedInput)\n  }\n\n  return (\n    <div className='main-body bg-dark-grey container'>\n      <div className='row p-1'>\n        <div className='col'>\n          <LocationSearch search={handleSubmit} name={data.name} />\n        </div>\n      </div>\n      <br/>\n      <div className='row p-1'>\n        <div className='col'>\n          <Current weather={data} />\n        </div>\n      </div>\n      <div className='row p-1'>\n        <div className='col'>\n          <Forecast location={location} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}